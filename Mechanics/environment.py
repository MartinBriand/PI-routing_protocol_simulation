"""
Environment file
"""
from Mechanics.Actors.carriers.carrier import Carrier
from Mechanics.Tools.load import Load
from Mechanics.Actors.nodes.node import Node
from Mechanics.Actors.shippers.shipper import Shipper


class Environment:
    """
    This is the Environment class. It should be seen as a simple clock necessary for the functioning of the game,
    but not as a real entity of the game. If a version ever have to be implemented or become more realistic,
    the Environment should be deleted.
    """

    def __init__(self):

        # for the four lists, the creation process add them to the list
        self._nodes: [Node] = []
        self._carriers: [Carrier] = []
        self._shippers: [Shipper] = []
        self._loads: [Load] = []

        self._loads_with_new_infos: [Load] = [load for load in self._loads if load.has_new_infos()]

        self._distances = {}  # should be a dictionary of dictionaries with nodes as keys

    def iteration(self):
        """This is the main function of the Environment class. It represents the operation of the game for one unit of
        time. It should be called in a loop after initializing the game."""

        self._get_new_loads()
        self._run_auctions()
        self._carriers_next_states()
        self._get_and_broadcast_new_infos()

    def _get_new_loads(self):
        """Gathering new loads generated by shippers"""
        for shipper in self._shippers:
            shipper.generate_loads()

    def _run_auctions(self):
        """Ask nodes to run the auctions (collect bids and reserve prices, make attribution and ask for payments)"""
        for node in self._nodes:
            node.run_auction()

    def _carriers_next_states(self):
        """Asking carriers to move"""
        for carrier in self._carriers:
            carrier.next_step()

    def _get_and_broadcast_new_infos(self):  # FIXME: This can be clearly optimized
        """Asking loads with new infos to communicate this and then broadcast the information to nodes"""
        new_infos = []
        for load in self._loads_with_new_infos:
            new_infos += load.communicate_infos()
        for node in self._nodes:
            node.update_weights_with_new_infos(new_infos)
        self._loads_with_new_infos = []

    def get_distance(self, start, end):
        """to be called by carriers to know the remaining time"""
        return self._distances[start][end]

    def set_distance(self, distances):
        """the set distance function"""
        self._distances = distances

    def add_node(self, node):
        """add_node function"""
        self._nodes.append(node)

    def add_carrier(self, carrier):
        """add_carrier function"""
        self._carriers.append(carrier)

    def add_shipper(self, shipper):
        """add_shipper function"""
        self._shippers.append(shipper)

    def add_load(self, load):
        """add_load function"""
        self._loads.append(load)

    def add_load_to_new_infos_list(self, load):
        """to be called by load with new info to signal the new information"""
        self._loads_with_new_infos.append(load)

    @property
    def nodes(self):
        return self._nodes
