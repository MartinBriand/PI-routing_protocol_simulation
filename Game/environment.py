"""
Environment file
"""
from Game.Actors.carrier.carrier import Carrier
from Game.Tools.load import Load
from Game.Actors.node.node import Node
from Game.Actors.shipper.shipper import Shipper


class Environment:
    """
    This is the Environment class. It should be seen as a simple clock necessary for the functioning of the game,
    but not as a real entity of the game. If a version ever have to be implemented or become more realistic,
    the Environment should be deleted.
    """

    def __init__(self, carriers: [Carrier], shippers: [Shipper], nodes: [Node], loads: [Load], distances):
        self.carriers: [Carrier] = carriers
        self.shippers: [Shipper] = shippers
        self.nodes: [Node] = nodes
        self.loads: [Load] = loads

        self.new_loads: [Load] = self.loads.copy()
        self.loads_with_new_infos: [Load] = [load for load in self.loads if load.has_new_infos()]

        self.distances = distances  # should be a dictionary of dictionaries with node as keys

    def iteration(self):
        """This is the main function of the Environment class. It represents the operation of the game for one unit of
        time. It should be called in a loop after initializing the game."""

        self._get_new_loads()
        self._run_auctions()
        self._carriers_next_states()
        self._get_and_broadcast_new_infos()

    def _get_new_loads(self):
        """Gathering new loads generated by shippers"""
        self.new_loads = []
        for shipper in self.shippers:
            new_shipper_loads = shipper.generate_loads()
            if new_shipper_loads is not None:
                self.new_loads = self.new_loads + new_shipper_loads
        self.loads = self.loads + self.new_loads

    def _run_auctions(self):
        """Ask nodes to run the auctions (collect bids and reserve prices, make attribution and ask for payments)"""
        for node in self.nodes:
            node.run_auction()  # TODO: implement this function

    def _carriers_next_states(self):
        """Asking carriers to move"""
        for carrier in self.carriers:
            carrier.next_step()

    def _get_and_broadcast_new_infos(self):
        """Asking loads with new infos to communicate this and then broadcast the information to nodes"""
        new_infos = []
        for load in self.loads_with_new_infos:
            new_infos += load.communicate_infos()
        for node in self.nodes:
            node.update_weights_with_new_infos(new_infos)  # TODO: implement this function
        self.loads_with_new_infos = []

    def add_load_to_new_infos_list(self, load):
        self.loads_with_new_infos.append(load)

    def get_distance(self, start, end):
        return self.distances[start][end]
